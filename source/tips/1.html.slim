---
layout: tips
tip_id: 1
---

h3 whileループ

p
  | whileループは最も基本的なループ記法です。

pre.well
  | while <ループを継続するかどうか>
      <繰り返す処理>
    end

p
  | 例えば、1から100まで表示するループは以下のようになります。

pre.well
  | i = 1
    while i <= 100
      puts i
      i += 1
    end

p
  | また、whileループは、breakを使って抜けることができます。
  | 「無限ループを作っておいてから、特定の条件に合致する場合だけbreakする」といった書き方をよくやります。

pre.well
  | while true # ループ継続条件が常に「true」なので無限ループになる
      <繰り返す処理>

      print '終了しますか？(y/n): '
      break if gets.start_with?('y') # ユーザが「y」を入力したらループを抜ける
    end

h3 コレクションeach

p
  | 前述の「1から100まで表示するループ」のコードは、以下のように、もっと簡単なコードで実現することができます。

pre.well
  | (1..100).each do |i|
      puts i
    end

p
  | この書き方は「ループ」という考え方とは別のアプローチになります。

p
  | まずは「コレクション」という概念を導入します。コレクションとは、データの集まりのことです。
  | 例えば配列は、コレクションの種類の1つになります。

p
  | 今回は「Range」という種類のコレクションを使っています。
  | Rangeはその名の通り「範囲」を表すコレクションです。
  | 「1..100」 の部分がRangeを作成しているコードで、「1から100までの数値」という範囲を表します。

pre.well
  | <開始値>..<終端値>

p
  | 次に、コレクションを使った処理についてです。
  | コレクションには、データの追加や削除などの様々な処理が考えられますが、
  | 今回は「走査」という処理を使います。
  | 「走査」は、コレクションの中身のデータを1つずつ読み込みながら、
  | そのデータに対して順番に何らかの処理を行うことです。

pre.well
  | <コレクション>.each do |<変数名>|
      <上の行で指定した変数にデータが1つずつ読み込まれるので、その値を用いて繰り返し行う処理>
    end

h3 whileとeachの使い分け

p
  | 一般的には、それぞれ以下の様な特徴があります

ul
  li eachで書いた方が読みやすいコードで書ける
  li whileはより柔軟な処理を書ける

p
  | 最初は強くこだわる必要はありませんが、慣れてきたら「eachで書ける場合はeachで」という
  | 感覚で選ぶとよいでしょう。

h3 より広く、深く知る

p
  a href="http://docs.ruby-lang.org/ja/2.3.0/doc/index.html" target="_blank"
    | 公式ドキュメント
  | に、より詳細な説明や、このページでは省略した内容も載っていますので、興味があれば読んでみてください。

ul
  li
    a href="http://docs.ruby-lang.org/ja/2.3.0/doc/spec=2fcontrol.html" target="_blank"
      | ループや、それ以外の文について
  li
    a href="http://docs.ruby-lang.org/ja/2.3.0/class/Enumerable.html" target="_blank"
      | 本文で「コレクション」読んだものの定義
  li
    a href="http://docs.ruby-lang.org/ja/2.3.0/class/Range.html" target="_blank"
      | Rangeについて
